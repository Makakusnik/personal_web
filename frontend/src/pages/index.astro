---
import "@/styles/global.css";
import type {
  PersonalInfo,
  JobExperience,
  Skill,
  Project,
  Contact,
  MetaData,
} from "@/types";
import { strapiFetch } from "@/utils/fetching";
import JobExperienceCard from "@/components/job-experience-card.astro";
import { formatDate } from "@/utils/date";
import SkillBadge from "@/components/skill-badge.astro";
import ProjectCard from "@/components/project/project-card.astro";
import ProjectModal from "@/components/project/project-modal";
import { getMarkdownParser } from "@/utils/markdownParser";
import TableOfContents from "@/components/table-of-contents";
import { GridPattern } from "@/components/ui/grid-pattern";
import ContactForm from "@/components/contact-form";
import { getImage, Image } from "astro:assets";

const markdownParser = getMarkdownParser();

const { data: personalInfoData } = await strapiFetch<PersonalInfo, false>(
  `/personal-info?populate=*`,
);

const markdownString = markdownParser.parse(personalInfoData.longDescriptionMd);

const { data: jobExperienceData } = await strapiFetch<JobExperience>(
  `/job-experiences?populate=*&sort=startDate:asc`,
);

const { data: skillData } = await strapiFetch<Skill>(`/skills`);

const { data: projectData } = await strapiFetch<Project>(
  `/projects?populate[skills]=*&populate[projectPlatforms][populate]=*&populate[fullImage][populate]=*&populate[previewImage][populate]=*`,
);
const parsedProjectData = await Promise.all(
  projectData?.map(async (project) => {
    let fullImageAstro = null;
    if (project.fullImage?.url) {
      fullImageAstro = await getImage({
        src: project.fullImage.url,
        alt: project.fullImage.alternativeText,
        width: project.fullImage.width,
        height: project.fullImage.height,
        quality: "high",
        format: "webp",
        loading: "eager",
      });
    }

    return {
      ...project,
      fullImageOptions: fullImageAstro,
      longDescriptionMd: project?.longDescriptionMd
        ? await markdownParser.parse(project.longDescriptionMd)
        : "",
    };
  }),
);

const { data: contactData } = await strapiFetch<Contact>(`/contacts`);

const { data: metaData } = await strapiFetch<MetaData, false>(
  `/metadata?populate=*`,
);
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />

    <!-- MetaData -->
    <meta name="author" content={metaData.author} />
    <meta name="description" content={metaData.description} />
    <meta name="keywords" content={metaData.keywords} />
    <meta name="theme-color" content={metaData.themeColor} />

    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />

    <meta property="og:title" content={metaData.ogTitle} />
    <meta property="og:description" content={metaData.ogDescription} />
    <meta property="og:type" content={metaData.ogType} />
    <meta property="og:url" content={metaData.ogUrl} />
    <meta property="og:image" content={metaData.ogImage.url} />
    <meta property="og:image:alt" content={metaData.ogImage.alternativeText} />
    <meta property="og:locale" content={metaData.ogLocale} />

    <meta name="twitter:card" content={metaData.twitterCard} />
    <meta name="twitter:site" content={metaData.twitterSite} />
    <meta name="twitter:title" content={metaData.twitterTitle} />
    <meta name="twitter:description" content={metaData.twitterDescription} />
    <meta name="twitter:image" content={metaData.twitterImage.url} />
    <meta
      name="twitter:image:alt"
      content={metaData.twitterImage.alternativeText}
    />

    <title>{metaData.title}</title>
    <!-- Umami analytics -->
    {
      import.meta.env.UMAMI_WEBSITE_ID && (
        <script
          defer
          src={import.meta.env.UMAMI_SCRIPT_URL + "/script.js"}
          data-website-id={import.meta.env.UMAMI_WEBSITE_ID}
        />
      )
    }
    <!-- Cloudflare Web Analytics -->
    {
      import.meta.env.CLOUDFLARE_ANALYTICS_TOKEN && (
        <script
          defer
          src="https://static.cloudflareinsights.com/beacon.min.js"
          data-cf-beacon={`{"token": "${import.meta.env.CLOUDFLARE_ANALYTICS_TOKEN}"}`}
        />
      )
    }
    <script is:inline>
      if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }

      window
        .matchMedia("(prefers-color-scheme: dark)")
        .addEventListener("change", (event) => {
          if (event.matches) {
            document.documentElement.classList.add("dark");
          } else {
            document.documentElement.classList.remove("dark");
          }
        });
    </script>
  </head>
  <body class="antialiased isolate bg-background">
    <span class="relative z-50">
      <TableOfContents client:load />
    </span>
    <div class="flex flex-col min-h-screen">
      <header
        id="intro"
        class="section-padding flex items-center min-h-screen relative overflow-hidden isolate"
      >
        <GridPattern
          width={80}
          height={80}
          x={-1}
          y={-1}
          className="stroke-border/50 fill-blue-100 [mask-image:radial-gradient(ellipse_at_center,white_40%,transparent_75%)] -z-10"
          client:idle
        />
        <div
          class="container mx-auto px-4 sm:px-6 lg:px-8 flex md:flex-row flex-col items-center justify-between gap-y-12"
        >
          <div class="mx-auto px-4 sm:px-6 lg:px-8 text-center md:text-left">
            <h1
              class="text-5xl md:text-6xl lg:text-7xl font-extrabold tracking-tight mb-6"
            >
              Hi, I'm <span class="text-primary"
                >{personalInfoData.firstName}</span
              >.
            </h1>
            <p
              class="text-2xl md:text-3xl text-foreground-muted mb-8 max-w-3xl mx-auto md:mx-0"
            >
              {personalInfoData.title}
            </p>
            <p class="text-lg text-foreground mb-10 max-w-2xl mx-auto md:mx-0">
              {personalInfoData.shortDescription}
            </p>
            <div
              class="gap-x-4 flex flex-col sm:flex-row gap-y-4 justify-center md:justify-start"
            >
              <a
                href="#projects"
                class="button-primary block! sm:inline-flex text-center"
              >
                View My Work
              </a>
              <a
                href="#contact"
                class="button-secondary block! sm:inline-flex text-center"
              >
                Let's Connect
              </a>
            </div>
          </div>
          <div class="w-1/2 md:w-fit">
            <Image
              src={personalInfoData.headshot.url}
              alt={personalInfoData.headshot.alternativeText}
              width={personalInfoData.headshot.width}
              height={personalInfoData.headshot.height}
              quality={"mid"}
              format={"webp"}
              loading="eager"
            />
          </div>
        </div>
      </header>
      <main class="flex-grow">
        <section id="about" class="section-padding">
          <div class="container mx-auto px-4 sm:px-6 lg:px-8">
            <h2 class="text-4xl font-bold text-center mb-12">
              A Little About Me
            </h2>
            <div
              class="max-w-3xl mx-auto text-lg text-foreground space-y-6 leading-relaxed"
            >
              <article set:html={markdownString} />
            </div>
          </div>
        </section>
        <section id="experience" class="section-padding">
          <div class="container mx-auto px-4 sm:px-6 lg:px-8">
            <h2 class="text-4xl font-bold text-center mb-12">
              My Professional Journey
            </h2>
            <div class="grid md:grid-cols-2 gap-8 max-w-4xl mx-auto">
              {
                jobExperienceData &&
                  jobExperienceData.map((job) => (
                    <JobExperienceCard
                      role={job.role}
                      companyFullName={job.companyFullName}
                      company={job.company}
                      startDate={formatDate(job.startDate)}
                      endDate={
                        job.endDate ? formatDate(job.endDate) : "Present"
                      }
                      isCurrentJob={job.isCurrentJob}
                      shortDescriptionMd={job.shortDescriptionMd}
                    />
                  ))
              }
            </div>
          </div>
        </section>
        <section id="skills" class="section-padding">
          <div class="container mx-auto px-4 sm:px-6 lg:px-8">
            <h2 class="text-4xl font-bold text-center mb-12">
              Core Competencies
            </h2>
            <div class="flex flex-wrap justify-center gap-4 max-w-2xl mx-auto">
              {
                skillData.map((skill) => (
                  <SkillBadge
                    skillName={skill.skillName}
                    iconName={skill.iconName}
                  />
                ))
              }
            </div>
            <p class="text-center mt-8 text-foreground-muted">
              ...and always eager to learn more!
            </p>
          </div>
        </section>

        <section id="projects" class="section-padding">
          <div class="container mx-auto px-4 sm:px-6 lg:px-8">
            <h2 class="text-4xl font-bold text-center mb-12">
              Featured Projects
            </h2>
            <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
              {
                parsedProjectData &&
                  parsedProjectData.map((project, index) => (
                    <ProjectCard project={project}>
                      <ProjectModal client:load project={project} />
                    </ProjectCard>
                  ))
              }
            </div>
          </div>
        </section>
        <section id="contact" class="section-padding">
          <ContactForm client:load contactData={contactData} />
        </section>
      </main>
      <footer class="py-8 border-t border-border bg-secondary">
        <div
          class="container mx-auto px-4 sm:px-6 lg:px-8 text-center text-foreground-muted"
        >
          <p class="font-semibold">
            &copy; {new Date().getFullYear()}
            {personalInfoData.firstName}
            {personalInfoData.lastName}. All rights reserved.
          </p>
          <p class="text-sm mt-1">
            Built with <a
              href="https://astro.build/"
              target="_blank"
              rel="noopener noreferrer"
              class="text-primary hover:underline">Astro</a
            >,
            <a
              href="https://react.dev/"
              target="_blank"
              rel="noopener noreferrer"
              class="text-primary hover:underline">React</a
            > & ❤️
          </p>
        </div>
      </footer>
    </div>
  </body>
</html>
